//#![allow(raw_pointer_derive)]

extern crate libc;

/* automatically generated by rust-bindgen */

//pub enum Enum_slz_state = ::libc::c_uint;
pub const SLZ_ST_INIT: ::libc::c_uint = 0;
pub const SLZ_ST_EOB: ::libc::c_uint = 1;
pub const SLZ_ST_FIXED: ::libc::c_uint = 2;
pub const SLZ_ST_LAST: ::libc::c_uint = 3;
pub const SLZ_ST_DONE: ::libc::c_uint = 4;
pub const SLZ_ST_END: ::libc::c_uint = 5;
//pub type Enum_Unnamed1 = ::libc::c_uint;
pub const SLZ_FMT_GZIP: ::libc::c_uint = 0;
pub const SLZ_FMT_ZLIB: ::libc::c_uint = 1;
pub const SLZ_FMT_DEFLATE: ::libc::c_uint = 2;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_slz_stream {
    pub queue: ::libc::uint32_t,
    pub qbits: ::libc::uint32_t,
    pub outbuf: *mut ::libc::c_uchar,
    pub state: ::libc::uint16_t,
    pub _bindgen_bitfield_1_: ::libc::uint8_t,
    pub _bindgen_bitfield_2_: ::libc::uint8_t,
    pub unused1: ::libc::uint8_t,
    pub crc32: ::libc::uint32_t,
    pub ilen: ::libc::uint32_t,
}
impl ::std::clone::Clone for Struct_slz_stream {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_slz_stream {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
extern "C" {
    pub fn slz_prepare_dist_table() -> ();
    pub fn slz_rfc1951_encode(strm: *mut Struct_slz_stream,
                              out: *mut ::libc::c_uchar,
                              _in: *const ::libc::c_uchar,
                              ilen: ::libc::c_long, more: ::libc::c_int)
     -> ::libc::c_long;
    pub fn slz_rfc1951_init(strm: *mut Struct_slz_stream,
                            level: ::libc::c_int) -> ::libc::c_int;
    pub fn slz_rfc1951_finish(strm: *mut Struct_slz_stream,
                              buf: *mut ::libc::c_uchar) -> ::libc::c_int;
    pub fn slz_make_crc_table() -> ();
    pub fn slz_crc32_by1(crc: ::libc::uint32_t, buf: *const ::libc::c_uchar,
                         len: ::libc::c_int) -> ::libc::uint32_t;
    pub fn slz_crc32_by4(crc: ::libc::uint32_t, buf: *const ::libc::c_uchar,
                         len: ::libc::c_int) -> ::libc::uint32_t;
    pub fn slz_rfc1952_encode(strm: *mut Struct_slz_stream,
                              out: *mut ::libc::c_uchar,
                              _in: *const ::libc::c_uchar,
                              ilen: ::libc::c_long, more: ::libc::c_int)
     -> ::libc::c_long;
    pub fn slz_rfc1952_send_header(strm: *mut Struct_slz_stream,
                                   buf: *mut ::libc::c_uchar)
     -> ::libc::c_int;
    pub fn slz_rfc1952_init(strm: *mut Struct_slz_stream,
                            level: ::libc::c_int) -> ::libc::c_int;
    pub fn slz_rfc1952_finish(strm: *mut Struct_slz_stream,
                              buf: *mut ::libc::c_uchar) -> ::libc::c_int;
    pub fn slz_adler32_by1(crc: ::libc::uint32_t, buf: *const ::libc::c_uchar,
                           len: ::libc::c_int) -> ::libc::uint32_t;
    pub fn slz_adler32_block(crc: ::libc::uint32_t, buf: *const ::libc::c_uchar,
                             len: ::libc::c_long) -> ::libc::uint32_t;
    pub fn slz_rfc1950_encode(strm: *mut Struct_slz_stream,
                              out: *mut ::libc::c_uchar,
                              _in: *const ::libc::c_uchar,
                              ilen: ::libc::c_long, more: ::libc::c_int)
     -> ::libc::c_long;
    pub fn slz_rfc1950_send_header(strm: *mut Struct_slz_stream,
                                   buf: *mut ::libc::c_uchar)
     -> ::libc::c_int;
    pub fn slz_rfc1950_init(strm: *mut Struct_slz_stream,
                            level: ::libc::c_int) -> ::libc::c_int;
    pub fn slz_rfc1950_finish(strm: *mut Struct_slz_stream,
                              buf: *mut ::libc::c_uchar) -> ::libc::c_int;
}
